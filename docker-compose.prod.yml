version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: doodlex_postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.http
    container_name: doodlex_backend
    restart: always
    ports:
      - "3001:3001"  # Add this to expose the port
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=production
    command: sh -c "cd /usr/src/app && pnpm run db:migrate && pnpm run start:http"
    networks:
      - app_network
  ws:
    build:
      context: .
      dockerfile: docker/Dockerfile.ws
    container_name: doodlex_ws
    restart: always
    ports:
      - "8080:8080" 
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=production
    networks:
      - app_network

  frontend:
    build:
      context: . 
      dockerfile: docker/Dockerfile.frontend
      args:
        - GOOGLE_API_KEY=${GOOGLE_API_KEY}
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
    container_name: doodlex_frontend
    restart: always
    ports:
      - "3000:3000"  # Add this to expose the port
    environment:
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data: