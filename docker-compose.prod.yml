version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: doodlex_postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.http
    container_name: doodlex_backend
    restart: always
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres
      - JWT_SECRET=OEMjrCoLQ6PaQfqS7VlM+exyhh4dCdsS9F9PiDz6MEI=
      - NODE_ENV=production
    command: sh -c "cd /usr/src/app && pnpm run db:migrate && pnpm run start:http"
    networks:
      - app_network

  ws:
    build:
      context: .
      dockerfile: docker/Dockerfile.ws
    container_name: doodlex_ws
    restart: always
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres
      - JWT_SECRET=OEMjrCoLQ6PaQfqS7VlM+exyhh4dCdsS9F9PiDz6MEI=
      - NODE_ENV=production
    ports:
      - "8080:8080"
    networks:
      - app_network

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: doodlex_frontend
    restart: always
    environment:
      - NEXT_PUBLIC_BACKEND_URL=https://doodlex.vinayaknagar.tech/api/v1
      - NEXT_PUBLIC_WS_URL=wss://doodlex.vinayaknagar.tech/ws
    ports:
      - "3000:3000"
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    container_name: doodlex_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - app_network
    depends_on:
      - backend
      - ws
      - frontend

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
